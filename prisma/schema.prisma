generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 用户角色
model Role {
  id             String           @id @default(cuid())
  name           String // 角色名称
  perm           String           @unique() // 权限字符 唯一
  sort           Float?
  route          String? // 默认路由
  status         AvailableStatus  @default(normal)
  remark         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  Account        Account[]
  RoleMenuConfig RoleMenuConfig[]
}

/// 部门
model Dept {
  id           String          @id @default(cuid())
  name         String // 部门名称
  sort         Float?
  status       AvailableStatus @default(normal)
  remark       String?
  parentDeptId String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  Account      Account[]

  parentDept Dept?  @relation("Dept_parent_Dept", fields: [parentDeptId], references: [id], onDelete: Cascade)
  children   Dept[] @relation("Dept_parent_Dept")
}

/// 用户
model Account {
  id        String          @id @default(cuid())
  roleId    String?
  deptId    String?
  status    AvailableStatus @default(normal)
  name      String
  phone     String          @unique
  username  String          @unique
  password  String
  remark    String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt

  role Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  dept Dept? @relation(fields: [deptId], references: [id], onDelete: Cascade)
}

/// 菜单
model SysMenu {
  id           String          @id @default(cuid())
  component    String?
  icon         String?
  menuName     String?
  orderNo      Float?
  permission   String?         @unique
  parentMenuId String?
  routePath    String?
  keepalive    String? /// 是否缓存
  show         String? /// 是否显示
  isExt        String? /// 是否外链
  redirect     String? /// 比如 /dashboard 需要配置跳转到 /dashboard/analysis
  status       AvailableStatus @default(normal)
  type         SysMenuType
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt

  parentMenu     SysMenu?         @relation("SysMenu_parent_SysMenu", fields: [parentMenuId], references: [id], onDelete: Cascade)
  children       SysMenu[]        @relation("SysMenu_parent_SysMenu")
  RoleMenuConfig RoleMenuConfig[]
}

/// 角色菜单配置
model RoleMenuConfig {
  id          Int      @id @default(autoincrement())
  roleId      String
  sysMenuPerm String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  sysMenu SysMenu @relation(fields: [sysMenuPerm], references: [permission], onDelete: Cascade)
}

/// 系统字典
model SysDict {
  id        Int             @id @default(autoincrement())
  category  SysDictCategory @default(select)
  name      String
  type      String          @unique
  remark    String?
  status    AvailableStatus @default(normal) /// 当前状态
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
}

/// 系统字典数据
model SysDictData {
  id        Int             @id @default(autoincrement())
  sort      Float?
  label     String
  value     String
  type      String
  remark    String?
  extra     Json? /// 扩展信息，对于有些数据，可以配置支持的扩展
  status    AvailableStatus @default(normal) /// 当前状态
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
}

/// 可用状态
enum AvailableStatus {
  normal /// 正常
  forbidden /// 禁用
}

enum SysDictCategory {
  radio
  select
}

enum SysMenuType {
  dir
  menu
  btn
}
